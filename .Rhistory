devtools::document()
install.packages("devtools")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgload::dev_help('advancedBayesianCausalInference')
library(Rcpp)
# 加载 C++ 代码
sourceCpp("path/to/advancedBayesianCausalInference.cpp")
library(Rcpp)
library(Rcpp)
data <- matrix(c(1, 0, 1, 1, 0, 1), nrow = 3)
# 调用 C++ 函数
causal_matrix <- advancedBayesianCausalInference(data, 1000, 200)
View(data)
file_name <- "BayesianCI.cpp"
# 使用 file.path() 构建文件的绝对路径
absolute_path <- file.path(getwd(), file_name)
# 打印文件的绝对路径
print(absolute_path)"
sourceCpp("BayesianCI.cpp")
# 文件名
file_name <- "BayesianCI.cpp"
# 使用 file.path() 构建文件的绝对路径
absolute_path <- file.path(getwd(), file_name)
# 打印文件的绝对路径
print(absolute_path)
# 确保文件存在后，加载 C++ 代码
if (file.exists(absolute_path)) {
sourceCpp(absolute_path)
} else {
cat("文件不存在，请检查路径:", absolute_path, "\n")
}
sourceCpp("path/to/advancedBayesianCausalInference.cpp")
sourceCpp("/Users/wurui/SA23204151/BayesianCI.cpp")
sourceCpp("/Users/wurui/SA23204151/src/BayesianCI.cpp")
# 创建示例数据
data <- matrix(c(1, 0, 1, 1, 0, 1), nrow = 3)
# 调用 C++ 函数
causal_matrix <- advancedBayesianCausalInference(data, 1000, 200)
# 打印结果
print(causal_matrix)
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
install.packages("dplyr")
install.packages("purrr")
library(randomForest)
library(dplyr)
library(purrr)
set.seed(123)  # 为了可重复性
n <- 100  # 样本大小
X <- data.frame(
feature1 = rnorm(n),
feature2 = rnorm(n)
)
Y <- rnorm(n) + 0.5 * (X$feature1 + X$feature2)  # 结果变量
W <- rbinom(n, 1, 0.5)  # 随机分配处理
results <- causal_random_forest(X, Y, W)
causal_random_forest <- function(X, Y, W, num.trees = 500, mtry = NULL, min.node.size = 5, sample.fraction = 0.632, alpha = 0.05) {
# Check inputs
if (length(Y) != length(W) || nrow(X) != length(W)) {
stop("Length of Y and W must match the number of rows in X.")
}
# Initialize variables
n <- nrow(X)
if (is.null(mtry)) {
mtry <- floor(sqrt(ncol(X)))
}
# Fit the random forest model for treated and control groups
rf_treated <- randomForest(x = X[W == 1, ], y = Y[W == 1], ntree = num.trees, mtry = mtry, nodesize = min.node.size, sampsize = floor(sample.fraction * sum(W == 1)))
rf_control <- randomForest(x = X[W == 0, ], y = Y[W == 0], ntree = num.trees, mtry = mtry, nodesize = min.node.size, sampsize = floor(sample.fraction * sum(W == 0)))
# Predict treatment effects
pred_treated <- predict(rf_treated, newdata = X)
pred_control <- predict(rf_control, newdata = X)
treatment_effects <- pred_treated - pred_control
# Calculate confidence intervals
se <- sqrt(var(treatment_effects) / length(treatment_effects))
ci_lower <- treatment_effects - qnorm(1 - alpha / 2) * se
ci_upper <- treatment_effects + qnorm(1 - alpha / 2) * se
# Return results
return(list(treatment_effects = treatment_effects, ci_lower = ci_lower, ci_upper = ci_upper))
}
set.seed(123)  # 设置随机种子以便复现结果
n <- 100  # 样本大小
X <- data.frame(
feature1 = rnorm(n),
feature2 = rnorm(n)
)
Y <- rnorm(n)  # 随机生成的结果变量
W <- rbinom(n, 1, 0.5)  # 随机分配处理组和对照组
# 运行 Causal Random Forest
results <- causal_random_forest(X, Y, W)
# 查看结果
print(results$treatment_effects)
print(results$ci_lower)
print(results$ci_upper)
gc()
gc()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
